<Control x:Name="Control" x:Class="WPF_dnscrypt_proxy_md.PopupEnumFilter"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:WPF_dnscrypt_proxy_md"
             mc:Ignorable="d" 
             xmlns:dgx="clr-namespace:DataGridExtensions;assembly=DataGridExtensions"
         xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">
    <Control.Resources>
        <Style TargetType="Popup" x:Key="ShowProtocolFilter">
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=IsChecked, ElementName=button}" Value="True" />
                        <Condition Binding="{Binding Path=Column.SortMemberPath, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}" Value="STAMP.Proto" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="IsOpen" Value="True" />
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding Path=IsChecked, ElementName=button}" Value="False">
                    <Setter Property="IsOpen" Value="False" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="Popup" x:Key="ShowFlagsFilter">
            <Style.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=IsChecked, ElementName=button}" Value="True" />
                        <Condition Binding="{Binding Path=Column.SortMemberPath, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}" Value="STAMP.Props" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="IsOpen" Value="True" />
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding Path=IsChecked, ElementName=button}" Value="False">
                    <Setter Property="IsOpen" Value="False" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Control.Resources>
    <Control.Template>
        <ControlTemplate>
            <Grid>
                <ToggleButton x:Name="button">
                    <ToggleButton.Style>
                        <Style TargetType="Control">
                            <!-- Only show the button if the filter is active or if the mouse is over the column header -->
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=Filter, ElementName=Control}" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}" Value="True">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ToggleButton.Style>
                    <!-- Reuse the standard icon, but change color to green -->
                    <Control Style="{DynamicResource {x:Static dgx:DataGridFilter.IconStyleKey}}" Foreground="Green"/>
                </ToggleButton>
                <Popup x:Name="Flags" Style="{StaticResource ShowFlagsFilter}" AllowsTransparency="True"
               DataContext="{Binding ElementName=Control}" StaysOpen="False">
                    <Border Background="White" BorderBrush="Gray" BorderThickness="1" CornerRadius="3" Padding="4">
                        <StackPanel>
                            <TextBlock Text="Select Flags Filter:" Margin="0,3"/>
                            <xctk:CheckComboBox Delimiter=" | "  BorderThickness="0"  DisplayMemberPath="Value" ValueMemberPath="Key"
                                                ItemsSource="{Binding Source={local:EnumList {x:Type local:ServerFlag}, AsString=True, DBNull=False}}"
                                                SelectedItemsOverride="{Binding FlagsValue, Mode=TwoWay, Converter={local:EnumConverter}, ConverterParameter={x:Type local:ServerFlag}}"/>

                        </StackPanel>
                    </Border>
                </Popup>
                <Popup x:Name="Protocol" Style="{StaticResource ShowProtocolFilter}" AllowsTransparency="True"
               DataContext="{Binding ElementName=Control}" StaysOpen="False">
                    <Border Background="White" BorderBrush="Gray" BorderThickness="1" CornerRadius="3" Padding="4">
                        <StackPanel>
                            <TextBlock Text="Select Protocol Filter:" Margin="0,3"/>
                            <xctk:CheckComboBox BorderThickness="0"  DisplayMemberPath="Value" ValueMemberPath="Key"
                                                ItemsSource="{Binding Source={local:EnumList {x:Type local:Protocol}, AsString=True, DBNull=False}}"
                                                SelectedItemsOverride="{Binding ProtocolValue, Mode=TwoWay, Converter={local:EnumConverter}, ConverterParameter={x:Type local:Protocol}}"/>

                        </StackPanel>
                    </Border>
                </Popup>

            </Grid>
        </ControlTemplate>
    </Control.Template>
</Control>